{"version":3,"sources":["img/logo.png","img/spinner.gif","components/ui/Header.js","components/characters/CharacterItem.js","components/ui/spinner.js","components/characters/CharacterGrid.js","components/ui/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CharacterItem","item","img","name","portrayed","nickname","birthday","status","Spinner","spinner","style","width","margin","display","CharacterGrid","items","isLoading","map","key","char_id","Search","getQuery","useState","text","setText","type","placeholder","value","onChange","e","q","target","autoFocus","App","setItems","setIsLoading","query","setQuery","useEffect","a","axios","result","data","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mOCW5BC,EARA,WACX,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMC,IAAI,OCyBjBC,G,MA7BO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACE,yBAAKL,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKI,EAAKC,IAAKH,IAAI,MAE1B,yBAAKH,UAAU,aACb,4BAAKK,EAAKE,MACV,4BACE,4BACE,+CADF,IACgCF,EAAKG,WAErC,4BACE,6CADF,IAC8BH,EAAKI,UAEnC,4BACE,6CADF,IAC8BJ,EAAKK,UAEnC,4BACE,2CADF,IAC4BL,EAAKM,c,iBCT9BC,EAVC,WACZ,OACI,yBAAKX,IAAKY,IAASC,MAAO,CACtBC,MAAM,QACNC,OAAQ,OACRC,QAAS,YCINC,EARO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MACrB,OAD2C,EAAfC,UACT,kBAAC,EAAD,MAAsB,6BAASpB,UAAU,SACvDmB,EAAME,KAAI,SAAChB,GAAD,OACP,kBAAC,EAAD,CAAeiB,IAAKjB,EAAKkB,QAASlB,KAAMA,SCgBrCmB,EArBA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEHC,mBAAS,IAFN,mBAEpBC,EAFoB,KAEdC,EAFc,KAQ3B,OACI,6BAAS5B,UAAU,UACf,8BACI,2BAAO6B,KAAK,OAAO7B,UAAU,eAC7B8B,YAAY,oBACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAVJC,EAUoBD,EAAEE,OAAOJ,MAT3CH,EAAQM,QACRT,EAASS,GAFI,IAACA,GAWNE,WAAS,OCeVC,MAzBf,WAAgB,IAAD,EACaX,mBAAS,IADtB,mBACNP,EADM,KACCmB,EADD,OAEqBZ,oBAAS,GAF9B,mBAENN,EAFM,KAEKmB,EAFL,OAGab,mBAAS,IAHtB,mBAGNc,EAHM,KAGCC,EAHD,KAgBb,OAXAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,sDAAD,OAAuDJ,IADhE,OACXK,EADW,OAIjBP,EAASO,EAAOC,MAChBP,GAAa,GALI,2CAAH,qDAQhBQ,KACC,CAACP,IAEF,yBAAKxC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQyB,SAAU,SAACS,GAAD,OAAOO,EAASP,MAClC,kBAAC,EAAD,CAAed,UAAWA,EAAWD,MAAOA,MCf9B6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3fadd22d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3795f66d.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react';\r\nimport logo from '../../img/logo.png';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className='center'>\r\n            <img src={logo} alt='' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst CharacterItem = ({ item }) => {\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-inner'>\r\n        <div className='card-front'>\r\n          <img src={item.img} alt='' />\r\n        </div>\r\n        <div className='card-back'>\r\n          <h1>{item.name}</h1>\r\n          <ul>\r\n            <li>\r\n              <strong>Actor Name:</strong> {item.portrayed}\r\n            </li>\r\n            <li>\r\n              <strong>Nickname:</strong> {item.nickname}\r\n            </li>\r\n            <li>\r\n              <strong>Birthday:</strong> {item.birthday}\r\n            </li>\r\n            <li>\r\n              <strong>Status:</strong> {item.status}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharacterItem","import React from 'react';\r\nimport spinner from '../../img/spinner.gif';\r\n\r\nconst Spinner = () => {\r\n    return(\r\n        <img src={spinner} style={{\r\n            width:'200px',\r\n            margin: 'auto',\r\n            display: 'block' }}\r\n            />\r\n    )\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport CharacterItem from './CharacterItem';\r\nimport Spinner from '../ui/spinner';\r\n\r\nconst CharacterGrid = ({ items, isLoading}) => {\r\n    return isLoading ? <Spinner></Spinner> : <section className=\"cards\">\r\n        {items.map((item) => (\r\n            <CharacterItem key={item.char_id} item={item}></CharacterItem>\r\n        ))}\r\n    </section>\r\n}\r\n\r\nexport default CharacterGrid;","import React, {useState} from 'react';\r\n\r\nconst Search = ({getQuery}) => {\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const onChange = (q) => {\r\n        setText(q)\r\n        getQuery(q)\r\n    }\r\n    return(\r\n        <section className='search'>\r\n            <from>\r\n                <input type='text' className='form-control'\r\n                placeholder='Search characters'\r\n                value={text}\r\n                onChange={(e) => onChange(e.target.value)}\r\n                autoFocus />\r\n            </from>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './components/ui/Header';\nimport './App.css';\nimport CharacterGrid from './components/characters/CharacterGrid';\nimport Search from './components/ui/Search';\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`);\n\n      //console.log(result.data);\n      setItems(result.data);\n      setIsLoading(false);\n    }\n\n    fetchItems();\n  }, [query])\n  return (\n    <div className=\"container\">\n      <Header />\n      <Search getQuery={(q) => setQuery(q)} />\n      <CharacterGrid isLoading={isLoading} items={items} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}